using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Zem80.Core.CPU;

namespace Zem80.Core.CPU
{
    public static class InstructionSet
    {
        public static IDictionary<int, Instruction> Instructions { get; private set; } = new Dictionary<int, Instruction>();
        public static IDictionary<string, Instruction> InstructionsByMnemonic { get; private set; } = new Dictionary<string, Instruction>();

        public static Instruction NOP => Instructions[0];

        public static void Build()
        {
            if (Instructions.Count == 0)
            {
                var instructions = new List<Instruction>();

                // we have to build the complete Z80 instruction set, with metadata to allow us to reflect on the instructions as we process them
                // below is a (very long) table of Instruction object instantiations wrapped in an 'instruction_table' block (so you can collapse them easily)
                // instruction constructor is: new Instruction(opcode, mnemonic, condition, target, source, argument1, argument2, sizeInBytes, machine cycles)

                // note that this table includes undocumented instructions and duplicate instructions (same instruction on a different extended opcode)
                // for example, the SLL instructions are not documented, and instructions like NOP2/NEG3 etc are duplicate overloads where the Z80 will execute them
                // on different opcodes from the official ones

                // there are also 'copy register' opcodes which perform the same operation as an existing opcode but then copy the result from the operation into a register
                // (and hence take longer to run); these are all undocumented and are procedurally generated and are NOT in the table

                // ***********************   INSTRUCTION TABLE   ************************ 

                #region instruction_table

                instructions.Add(new Instruction("00", "NOP", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("01", "LD BC,nn", Condition.None, InstructionElement.BC, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("02", "LD (BC),A", Condition.None, InstructionElement.AddressFromBC, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("03", "INC BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("04", "INC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("05", "DEC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("06", "LD B,n", Condition.None, InstructionElement.B, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("07", "RLCA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("08", "EX AF,AF'", Condition.None, InstructionElement.AF, InstructionElement.AF, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("09", "ADD HL,BC", Condition.None, InstructionElement.HL, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("0A", "LD A,(BC)", Condition.None, InstructionElement.A, InstructionElement.AddressFromBC, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("0B", "DEC BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("0C", "INC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("0D", "DEC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("0E", "LD C,n", Condition.None, InstructionElement.C, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("0F", "RRCA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("10", "DJNZ o", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("11", "LD DE,nn", Condition.None, InstructionElement.DE, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("12", "LD (DE),A", Condition.None, InstructionElement.AddressFromDE, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("13", "INC DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("14", "INC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("15", "DEC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("16", "LD D,n", Condition.None, InstructionElement.D, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("17", "RLA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("18", "JR o", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("19", "ADD HL,DE", Condition.None, InstructionElement.HL, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("1A", "LD A,(DE)", Condition.None, InstructionElement.A, InstructionElement.AddressFromDE, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("1B", "DEC DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("1C", "INC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("1D", "DEC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("1E", "LD E,n", Condition.None, InstructionElement.E, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("1F", "RRA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("20", "JR NZ,o", Condition.NZ, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("21", "LD HL,nn", Condition.None, InstructionElement.HL, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("22", "LD (nn),HL", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.HL, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("23", "INC HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("24", "INC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("25", "DEC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("26", "LD H,n", Condition.None, InstructionElement.H, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("27", "DAA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("28", "JR Z,o", Condition.Z, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("29", "ADD HL,HL", Condition.None, InstructionElement.HL, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("2A", "LD HL,(nn)", Condition.None, InstructionElement.HL, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("2B", "DEC HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("2C", "INC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("2D", "DEC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("2E", "LD L,n", Condition.None, InstructionElement.L, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("2F", "CPL", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("30", "JR NC,o", Condition.NC, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("31", "LD SP,nn", Condition.None, InstructionElement.SP, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("32", "LD (nn),A", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("33", "INC SP", Condition.None, InstructionElement.SP, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("34", "INC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("35", "DEC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("36", "LD (HL),n", Condition.None, InstructionElement.AddressFromHL, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("37", "SCF", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("38", "JR C,o", Condition.C, InstructionElement.C, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("39", "ADD HL,SP", Condition.None, InstructionElement.HL, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("3A", "LD A,(nn)", Condition.None, InstructionElement.A, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("3B", "DEC SP", Condition.None, InstructionElement.SP, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("3C", "INC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("3D", "DEC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("3E", "LD A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("3F", "CCF", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("40", "LD B,B", Condition.None, InstructionElement.B, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("41", "LD B,C", Condition.None, InstructionElement.B, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("42", "LD B,D", Condition.None, InstructionElement.B, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("43", "LD B,E", Condition.None, InstructionElement.B, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("44", "LD B,H", Condition.None, InstructionElement.B, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("45", "LD B,L", Condition.None, InstructionElement.B, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("47", "LD B,A", Condition.None, InstructionElement.B, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("46", "LD B,(HL)", Condition.None, InstructionElement.B, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("48", "LD C,B", Condition.None, InstructionElement.C, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("49", "LD C,C", Condition.None, InstructionElement.C, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4A", "LD C,D", Condition.None, InstructionElement.C, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4B", "LD C,E", Condition.None, InstructionElement.C, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4C", "LD C,H", Condition.None, InstructionElement.C, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4D", "LD C,L", Condition.None, InstructionElement.C, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4F", "LD C,A", Condition.None, InstructionElement.C, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("4E", "LD C,(HL)", Condition.None, InstructionElement.C, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("50", "LD D,B", Condition.None, InstructionElement.D, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("51", "LD D,C", Condition.None, InstructionElement.D, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("52", "LD D,D", Condition.None, InstructionElement.D, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("53", "LD D,E", Condition.None, InstructionElement.D, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("54", "LD D,H", Condition.None, InstructionElement.D, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("55", "LD D,L", Condition.None, InstructionElement.D, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("57", "LD D,A", Condition.None, InstructionElement.D, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("56", "LD D,(HL)", Condition.None, InstructionElement.D, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("58", "LD E,B", Condition.None, InstructionElement.E, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("59", "LD E,C", Condition.None, InstructionElement.E, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5A", "LD E,D", Condition.None, InstructionElement.E, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5B", "LD E,E", Condition.None, InstructionElement.E, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5C", "LD E,H", Condition.None, InstructionElement.E, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5D", "LD E,L", Condition.None, InstructionElement.E, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5F", "LD E,A", Condition.None, InstructionElement.E, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("5E", "LD E,(HL)", Condition.None, InstructionElement.E, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("60", "LD H,B", Condition.None, InstructionElement.H, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("61", "LD H,C", Condition.None, InstructionElement.H, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("62", "LD H,D", Condition.None, InstructionElement.H, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("63", "LD H,E", Condition.None, InstructionElement.H, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("64", "LD H,H", Condition.None, InstructionElement.H, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("65", "LD H,L", Condition.None, InstructionElement.H, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("67", "LD H,A", Condition.None, InstructionElement.H, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("66", "LD H,(HL)", Condition.None, InstructionElement.H, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("68", "LD L,B", Condition.None, InstructionElement.L, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("69", "LD L,C", Condition.None, InstructionElement.L, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6A", "LD L,D", Condition.None, InstructionElement.L, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6B", "LD L,E", Condition.None, InstructionElement.L, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6C", "LD L,H", Condition.None, InstructionElement.L, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6D", "LD L,L", Condition.None, InstructionElement.L, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6F", "LD L,A", Condition.None, InstructionElement.L, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("6E", "LD L,(HL)", Condition.None, InstructionElement.L, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("70", "LD (HL),B", Condition.None, InstructionElement.AddressFromHL, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("71", "LD (HL),C", Condition.None, InstructionElement.AddressFromHL, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("72", "LD (HL),D", Condition.None, InstructionElement.AddressFromHL, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("73", "LD (HL),E", Condition.None, InstructionElement.AddressFromHL, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("74", "LD (HL),H", Condition.None, InstructionElement.AddressFromHL, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("75", "LD (HL),L", Condition.None, InstructionElement.AddressFromHL, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("77", "LD (HL),A", Condition.None, InstructionElement.AddressFromHL, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("76", "HALT", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("78", "LD A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("79", "LD A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7A", "LD A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7B", "LD A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7C", "LD A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7D", "LD A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7F", "LD A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("7E", "LD A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("80", "ADD A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("81", "ADD A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("82", "ADD A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("83", "ADD A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("84", "ADD A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("85", "ADD A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("87", "ADD A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("86", "ADD A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("88", "ADC A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("89", "ADC A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8A", "ADC A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8B", "ADC A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8C", "ADC A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8D", "ADC A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8F", "ADC A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("8E", "ADC A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("90", "SUB B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("91", "SUB C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("92", "SUB D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("93", "SUB E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("94", "SUB H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("95", "SUB L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("97", "SUB A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("96", "SUB (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("98", "SBC A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("99", "SBC A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9A", "SBC A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9B", "SBC A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9C", "SBC A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9D", "SBC A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9F", "SBC A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("9E", "SBC A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("A0", "AND B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A1", "AND C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A2", "AND D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A3", "AND E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A4", "AND H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A5", "AND L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A7", "AND A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A6", "AND (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("A8", "XOR B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("A9", "XOR C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AA", "XOR D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AB", "XOR E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AC", "XOR H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AD", "XOR L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AF", "XOR A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("AE", "XOR (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("B0", "OR B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B1", "OR C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B2", "OR D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B3", "OR E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B4", "OR H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B5", "OR L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B7", "OR A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B6", "OR (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("B8", "CP B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("B9", "CP C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BA", "CP D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BB", "CP E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BC", "CP H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BD", "CP L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BF", "CP A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("BE", "CP (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("C0", "RET NZ", Condition.NZ, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("C1", "POP BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("C2", "JP NZ,nn", Condition.NZ, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("C3", "JP nn", Condition.None, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("C4", "CALL NZ,nn", Condition.NZ, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("C5", "PUSH BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("C6", "ADD A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("C7", "RST 00H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("C8", "RET Z", Condition.Z, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("C9", "RET", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("CA", "JP Z,nn", Condition.Z, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("CC", "CALL Z,nn", Condition.Z, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("CD", "CALL nn", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("CE", "ADC A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("CF", "RST 08H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("D0", "RET NC", Condition.NC, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("D1", "POP DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("D2", "JP NC,nn", Condition.NC, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("D3", "OUT (n),A", Condition.None, InstructionElement.None, InstructionElement.A, InstructionElement.PortNumberFromByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("D4", "CALL NC,nn", Condition.NC, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("D5", "PUSH DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("D6", "SUB n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("D7", "RST 10H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("D8", "RET C", Condition.C, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("D9", "EXX", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DA", "JP C,nn", Condition.C, InstructionElement.C, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("DB", "IN A,(n)", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.PortNumberFromByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("DC", "CALL C,nn", Condition.C, InstructionElement.C, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("DE", "SBC A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("DF", "RST 18H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("E0", "RET PO", Condition.PO, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("E1", "POP HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("E2", "JP PO,nn", Condition.PO, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("E3", "EX (SP),HL", Condition.None, InstructionElement.AddressFromSP, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 5, false) }));
                instructions.Add(new Instruction("E4", "CALL PO,nn", Condition.PO, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("E5", "PUSH HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("E6", "AND n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("E7", "RST 20H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("E8", "RET PE", Condition.PE, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("E9", "JP HL", Condition.None, InstructionElement.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("EA", "JP PE,nn", Condition.PE, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("EB", "EX DE,HL", Condition.None, InstructionElement.DE, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("EC", "CALL PE,nn", Condition.PE, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("EE", "XOR n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("EF", "RST 28H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("F0", "RET P", Condition.P, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("F1", "POP AF", Condition.None, InstructionElement.AF, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("F2", "JP P,nn", Condition.P, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("F3", "DI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("F4", "CALL P,nn", Condition.P, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("F5", "PUSH AF", Condition.None, InstructionElement.AF, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("F6", "OR n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("F7", "RST 30H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("F8", "RET M", Condition.M, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("F9", "LD SP,HL", Condition.None, InstructionElement.SP, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FA", "JP M,nn", Condition.M, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("FB", "EI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FC", "CALL M,nn", Condition.M, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction("FE", "CP n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("FF", "RST 38H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("CB00", "RLC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB01", "RLC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB02", "RLC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB03", "RLC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB04", "RLC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB05", "RLC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB07", "RLC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB06", "RLC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB08", "RRC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB09", "RRC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0A", "RRC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0B", "RRC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0C", "RRC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0D", "RRC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0F", "RRC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB0E", "RRC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB10", "RL B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB11", "RL C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB12", "RL D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB13", "RL E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB14", "RL H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB15", "RL L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB17", "RL A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB16", "RL (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB18", "RR B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB19", "RR C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1A", "RR D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1B", "RR E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1C", "RR H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1D", "RR L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1F", "RR A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB1E", "RR (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB20", "SLA B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB21", "SLA C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB22", "SLA D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB23", "SLA E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB24", "SLA H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB25", "SLA L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB27", "SLA A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB26", "SLA (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB28", "SRA B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB29", "SRA C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2A", "SRA D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2B", "SRA E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2C", "SRA H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2D", "SRA L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2F", "SRA A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB2E", "SRA (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB30", "SLL B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB31", "SLL C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB32", "SLL D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB33", "SLL E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB34", "SLL H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB35", "SLL L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB37", "SLL A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB36", "SLL (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB38", "SRL B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB39", "SRL C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3A", "SRL D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3B", "SRL E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3C", "SRL H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3D", "SRL L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3F", "SRL A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB3E", "SRL (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB47", "BIT 0,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4F", "BIT 1,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB57", "BIT 2,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5F", "BIT 3,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB67", "BIT 4,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6F", "BIT 5,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB77", "BIT 6,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7F", "BIT 7,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB40", "BIT 0,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB48", "BIT 1,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB50", "BIT 2,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB58", "BIT 3,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB60", "BIT 4,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB68", "BIT 5,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB70", "BIT 6,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB78", "BIT 7,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB41", "BIT 0,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB49", "BIT 1,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB51", "BIT 2,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB59", "BIT 3,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB61", "BIT 4,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB69", "BIT 5,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB71", "BIT 6,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB79", "BIT 7,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB42", "BIT 0,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4A", "BIT 1,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB52", "BIT 2,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5A", "BIT 3,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB62", "BIT 4,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6A", "BIT 5,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB72", "BIT 6,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7A", "BIT 7,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB43", "BIT 0,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4B", "BIT 1,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB53", "BIT 2,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5B", "BIT 3,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB63", "BIT 4,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6B", "BIT 5,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB73", "BIT 6,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7B", "BIT 7,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB44", "BIT 0,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4C", "BIT 1,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB54", "BIT 2,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5C", "BIT 3,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB64", "BIT 4,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6C", "BIT 5,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB74", "BIT 6,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7C", "BIT 7,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB45", "BIT 0,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB4D", "BIT 1,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB55", "BIT 2,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB5D", "BIT 3,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB65", "BIT 4,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB6D", "BIT 5,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB75", "BIT 6,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB7D", "BIT 7,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB46", "BIT 0,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB4E", "BIT 1,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB56", "BIT 2,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB5E", "BIT 3,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB66", "BIT 4,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB6E", "BIT 5,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB76", "BIT 6,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB7E", "BIT 7,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("CB87", "RES 0,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8F", "RES 1,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB97", "RES 2,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9F", "RES 3,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA7", "RES 4,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAF", "RES 5,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB7", "RES 6,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBF", "RES 7,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB80", "RES 0,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB88", "RES 1,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB90", "RES 2,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB98", "RES 3,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA0", "RES 4,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA8", "RES 5,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB0", "RES 6,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB8", "RES 7,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB81", "RES 0,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB89", "RES 1,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB91", "RES 2,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB99", "RES 3,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA1", "RES 4,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA9", "RES 5,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB1", "RES 6,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB9", "RES 7,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB82", "RES 0,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8A", "RES 1,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB92", "RES 2,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9A", "RES 3,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA2", "RES 4,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAA", "RES 5,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB2", "RES 6,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBA", "RES 7,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB83", "RES 0,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8B", "RES 1,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB93", "RES 2,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9B", "RES 3,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA3", "RES 4,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAB", "RES 5,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB3", "RES 6,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBB", "RES 7,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB84", "RES 0,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8C", "RES 1,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB94", "RES 2,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9C", "RES 3,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA4", "RES 4,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAC", "RES 5,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB4", "RES 6,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBC", "RES 7,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB85", "RES 0,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB8D", "RES 1,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB95", "RES 2,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB9D", "RES 3,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBA5", "RES 4,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBAD", "RES 5,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBB5", "RES 6,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBBD", "RES 7,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CB86", "RES 0,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB8E", "RES 1,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB96", "RES 2,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CB9E", "RES 3,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBA6", "RES 4,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBAE", "RES 5,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBB6", "RES 6,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBBE", "RES 7,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBC7", "SET 0,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCF", "SET 1,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD7", "SET 2,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDF", "SET 3,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE7", "SET 4,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEF", "SET 5,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF7", "SET 6,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFF", "SET 7,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC0", "SET 0,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC8", "SET 1,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD0", "SET 2,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD8", "SET 3,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE0", "SET 4,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE8", "SET 5,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF0", "SET 6,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF8", "SET 7,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC1", "SET 0,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC9", "SET 1,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD1", "SET 2,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD9", "SET 3,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE1", "SET 4,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE9", "SET 5,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF1", "SET 6,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF9", "SET 7,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC2", "SET 0,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCA", "SET 1,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD2", "SET 2,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDA", "SET 3,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE2", "SET 4,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEA", "SET 5,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF2", "SET 6,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFA", "SET 7,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC3", "SET 0,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCB", "SET 1,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD3", "SET 2,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDB", "SET 3,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE3", "SET 4,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEB", "SET 5,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF3", "SET 6,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFB", "SET 7,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC4", "SET 0,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCC", "SET 1,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD4", "SET 2,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDC", "SET 3,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE4", "SET 4,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBEC", "SET 5,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF4", "SET 6,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFC", "SET 7,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC5", "SET 0,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBCD", "SET 1,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBD5", "SET 2,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBDD", "SET 3,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBE5", "SET 4,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBED", "SET 5,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBF5", "SET 6,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBFD", "SET 7,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("CBC6", "SET 0,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBCE", "SET 1,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBD6", "SET 2,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBDE", "SET 3,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBE6", "SET 4,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBEE", "SET 5,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBF6", "SET 6,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("CBFE", "SET 7,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED40", "IN B,(C)", Condition.None, InstructionElement.B, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED41", "OUT (C),B", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED42", "SBC HL,BC", Condition.None, InstructionElement.HL, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED43", "LD (nn),BC", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.BC, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED44", "NEG", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED45", "RETN", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED46", "IM 0", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED47", "LD I,A", Condition.None, InstructionElement.I, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED48", "IN C,(C)", Condition.None, InstructionElement.C, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED49", "OUT (C),C", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED4A", "ADC HL,BC", Condition.None, InstructionElement.HL, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED4B", "LD BC,(nn)", Condition.None, InstructionElement.BC, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED54", "NEG2", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED4D", "RETI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED4E", "IM 0.1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED4F", "LD R,A", Condition.None, InstructionElement.R, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction("ED50", "IN D,(C)", Condition.None, InstructionElement.D, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED51", "OUT (C),D", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED52", "SBC HL,DE", Condition.None, InstructionElement.HL, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED53", "LD (nn),DE", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.DE, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED55", "RETN1", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED56", "IM 1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED57", "LD A,I", Condition.None, InstructionElement.A, InstructionElement.I, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction("ED58", "IN E,(C)", Condition.None, InstructionElement.E, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED59", "OUT (C),E", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED5A", "ADC HL,DE", Condition.None, InstructionElement.HL, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED5B", "LD DE,(nn)", Condition.None, InstructionElement.DE, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED5C", "NEG3", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED5D", "RETN2", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED5E", "IM 2", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED5F", "LD A,R", Condition.None, InstructionElement.A, InstructionElement.R, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction("ED60", "IN H,(C)", Condition.None, InstructionElement.H, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED61", "OUT (C),H", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED62", "SBC HL,HL", Condition.None, InstructionElement.HL, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED64", "NEG4", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED65", "RETN3", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED66", "IM 0.2", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED67", "RRD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED68", "IN L,(C)", Condition.None, InstructionElement.L, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED69", "OUT (C),L", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED6A", "ADC HL,HL", Condition.None, InstructionElement.HL, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED6C", "NEG5", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED6D", "RETN4", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED6F", "RLD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED70", "IN F,(C)", Condition.None, InstructionElement.F, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED71", "OUT (C),0", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.ByteValue, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED72", "SBC HL,SP", Condition.None, InstructionElement.HL, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED73", "LD (nn),SP", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.SP, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("ED74", "NEG6", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED75", "RETN5", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED76", "IM 1.1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED78", "IN A,(C)", Condition.None, InstructionElement.A, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction("ED77", "NOP2", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED79", "OUT (C),A", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("ED7A", "ADC HL,SP", Condition.None, InstructionElement.HL, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("ED7B", "LD SP,(nn)", Condition.None, InstructionElement.SP, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED7C", "NEG7", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED7D", "RETN6", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("ED7E", "IM 2.1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("ED7F", "NOP3", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("EDA0", "LDI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDA1", "CPI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDA2", "INI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("EDA3", "OUTI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("EDA8", "LDD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDA9", "CPD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction("EDAA", "IND", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("EDAB", "OUTD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction("EDB0", "LDIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDB1", "CPIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDB2", "INIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("EDB3", "OTIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("EDB8", "LDDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDB9", "CPDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction("EDBA", "INDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("EDBB", "OTDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction("DD24", "INC IXh", Condition.None, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD2C", "INC IXl", Condition.None, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD25", "DEC IXh", Condition.None, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD2D", "DEC IXl", Condition.None, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD09", "ADD IX,BC", Condition.None, InstructionElement.IX, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD19", "ADD IX,DE", Condition.None, InstructionElement.IX, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD21", "LD IX,nn", Condition.None, InstructionElement.IX, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("DD22", "LD (nn),IX", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.IX, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD23", "INC IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("DD26", "LD IXh,n", Condition.None, InstructionElement.IXh, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("DD29", "ADD IX,IX", Condition.None, InstructionElement.IX, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD2A", "LD IX,(nn)", Condition.None, InstructionElement.IX, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("DD2B", "DEC IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("DD2E", "LD IXl,n", Condition.None, InstructionElement.IXl, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("DD34", "INC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD35", "DEC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD36", "LD (IX+o),n", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.ByteValue, InstructionElement.DisplacementValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD39", "ADD IX,SP", Condition.None, InstructionElement.IX, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("DD44", "LD B,IXh", Condition.None, InstructionElement.B, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD45", "LD B,IXl", Condition.None, InstructionElement.B, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD46", "LD B,(IX+o)", Condition.None, InstructionElement.B, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD4C", "LD C,IXh", Condition.None, InstructionElement.C, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD4D", "LD C,IXl", Condition.None, InstructionElement.C, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD4E", "LD C,(IX+o)", Condition.None, InstructionElement.C, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD54", "LD D,IXh", Condition.None, InstructionElement.D, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD55", "LD D,IXl", Condition.None, InstructionElement.D, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD56", "LD D,(IX+o)", Condition.None, InstructionElement.D, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD5C", "LD E,IXh", Condition.None, InstructionElement.E, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD5D", "LD E,IXl", Condition.None, InstructionElement.E, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD5E", "LD E,(IX+o)", Condition.None, InstructionElement.E, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD60", "LD IXh,B", Condition.None, InstructionElement.IXh, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD61", "LD IXh,C", Condition.None, InstructionElement.IXh, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD62", "LD IXh,D", Condition.None, InstructionElement.IXh, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD63", "LD IXh,E", Condition.None, InstructionElement.IXh, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD64", "LD IXh,IXh", Condition.None, InstructionElement.IXh, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD65", "LD IXh,IXl", Condition.None, InstructionElement.IXh, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD67", "LD IXh,A", Condition.None, InstructionElement.IXh, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD66", "LD H,(IX+o)", Condition.None, InstructionElement.H, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD68", "LD IXl,B", Condition.None, InstructionElement.IXl, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD69", "LD IXl,C", Condition.None, InstructionElement.IXl, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6A", "LD IXl,D", Condition.None, InstructionElement.IXl, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6B", "LD IXl,E", Condition.None, InstructionElement.IXl, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6C", "LD IXl,IXh", Condition.None, InstructionElement.IXl, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6D", "LD IXl,IXl", Condition.None, InstructionElement.IXl, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6F", "LD IXl,A", Condition.None, InstructionElement.IXl, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD6E", "LD L,(IX+o)", Condition.None, InstructionElement.L, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD70", "LD (IX+o),B", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.B, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD71", "LD (IX+o),C", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.C, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD72", "LD (IX+o),D", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.D, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD73", "LD (IX+o),E", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.E, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD74", "LD (IX+o),H", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.H, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD75", "LD (IX+o),L", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.L, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD77", "LD (IX+o),A", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.A, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DD7C", "LD A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD7D", "LD A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD7E", "LD A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD84", "ADD A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD85", "ADD A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD86", "ADD A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD8C", "ADC A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD8D", "ADC A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD8E", "ADC A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD94", "SUB IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD95", "SUB IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD96", "SUB (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DD9C", "SBC A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD9D", "SBC A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DD9E", "SBC A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDA4", "AND IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDA5", "AND IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDA6", "AND (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDAC", "XOR IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDAD", "XOR IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDAE", "XOR (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDB4", "OR IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDB5", "OR IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDB6", "OR (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDBC", "CP IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDBD", "CP IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDBE", "CP (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("DDE1", "POP IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("DDE3", "EX (SP),IX", Condition.None, InstructionElement.AddressFromSP, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 5, false) }));
                instructions.Add(new Instruction("DDE5", "PUSH IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("DDE9", "JP IX", Condition.None, InstructionElement.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("DDF9", "LD SP,IX", Condition.None, InstructionElement.SP, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FD24", "INC IYh", Condition.None, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD2C", "INC IYl", Condition.None, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD25", "DEC IYh", Condition.None, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD2D", "DEC IYl", Condition.None, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD09", "ADD IY,BC", Condition.None, InstructionElement.IY, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD19", "ADD IY,DE", Condition.None, InstructionElement.IY, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD21", "LD IY,nn", Condition.None, InstructionElement.IY, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction("FD22", "LD (nn),IY", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.IY, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD23", "INC IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FD26", "LD IYh,n", Condition.None, InstructionElement.IYh, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("FD29", "ADD IY,IY", Condition.None, InstructionElement.IY, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD2A", "LD IY,(nn)", Condition.None, InstructionElement.IY, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction("FD2B", "DEC IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("FD2E", "LD IYl,n", Condition.None, InstructionElement.IYl, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction("FD34", "INC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD35", "DEC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD36", "LD (IY+o),n", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.ByteValue, InstructionElement.DisplacementValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD39", "ADD IY,SP", Condition.None, InstructionElement.IY, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction("FD44", "LD B,IYh", Condition.None, InstructionElement.B, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD45", "LD B,IYl", Condition.None, InstructionElement.B, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD46", "LD B,(IY+o)", Condition.None, InstructionElement.B, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD4C", "LD C,IYh", Condition.None, InstructionElement.C, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD4D", "LD C,IYl", Condition.None, InstructionElement.C, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD4E", "LD C,(IY+o)", Condition.None, InstructionElement.C, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD54", "LD D,IYh", Condition.None, InstructionElement.D, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD55", "LD D,IYl", Condition.None, InstructionElement.D, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD56", "LD D,(IY+o)", Condition.None, InstructionElement.D, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD5C", "LD E,IYh", Condition.None, InstructionElement.E, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD5D", "LD E,IYl", Condition.None, InstructionElement.E, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD5E", "LD E,(IY+o)", Condition.None, InstructionElement.E, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD60", "LD IYh,B", Condition.None, InstructionElement.IYh, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD61", "LD IYh,C", Condition.None, InstructionElement.IYh, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD62", "LD IYh,D", Condition.None, InstructionElement.IYh, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD63", "LD IYh,E", Condition.None, InstructionElement.IYh, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD64", "LD IYh,IYh", Condition.None, InstructionElement.IYh, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD65", "LD IYh,IYl", Condition.None, InstructionElement.IYh, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD67", "LD IYh,A", Condition.None, InstructionElement.IYh, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD66", "LD H,(IY+o)", Condition.None, InstructionElement.H, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD68", "LD IYl,B", Condition.None, InstructionElement.IYl, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD69", "LD IYl,C", Condition.None, InstructionElement.IYl, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6A", "LD IYl,D", Condition.None, InstructionElement.IYl, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6B", "LD IYl,E", Condition.None, InstructionElement.IYl, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6C", "LD IYl,IYh", Condition.None, InstructionElement.IYl, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6D", "LD IYl,IYl", Condition.None, InstructionElement.IYl, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6F", "LD IYl,A", Condition.None, InstructionElement.IYl, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD6E", "LD L,(IY+o)", Condition.None, InstructionElement.L, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD70", "LD (IY+o),B", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.B, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD71", "LD (IY+o),C", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.C, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD72", "LD (IY+o),D", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.D, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD73", "LD (IY+o),E", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.E, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD74", "LD (IY+o),H", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.H, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD75", "LD (IY+o),L", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.L, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD77", "LD (IY+o),A", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.A, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FD7C", "LD A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD7D", "LD A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD7E", "LD A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD84", "ADD A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD85", "ADD A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD86", "ADD A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD8C", "ADC A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD8D", "ADC A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD8E", "ADC A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD94", "SUB IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD95", "SUB IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD96", "SUB (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FD9C", "SBC A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD9D", "SBC A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FD9E", "SBC A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDA4", "AND IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDA5", "AND IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDA6", "AND (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDAC", "XOR IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDAD", "XOR IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDAE", "XOR (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDB4", "OR IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDB5", "OR IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDB6", "OR (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDBC", "CP IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDBD", "CP IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDBE", "CP (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction("FDE1", "POP IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("FDE3", "EX (SP),IY", Condition.None, InstructionElement.AddressFromSP, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 5, false) }));
                instructions.Add(new Instruction("FDE5", "PUSH IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction("FDE9", "JP IY", Condition.None, InstructionElement.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction("FDF9", "LD SP,IY", Condition.None, InstructionElement.SP, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction("DDCB06", "RLC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB0E", "RRC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB16", "RL (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB1E", "RR (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB26", "SLA (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB2E", "SRA (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB36", "SLL (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB3E", "SRL (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB46", "BIT 0,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB4E", "BIT 1,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB56", "BIT 2,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB5E", "BIT 3,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB66", "BIT 4,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB6E", "BIT 5,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB76", "BIT 6,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB7E", "BIT 7,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("DDCB86", "RES 0,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB8E", "RES 1,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB96", "RES 2,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCB9E", "RES 3,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBA6", "RES 4,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBAE", "RES 5,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBB6", "RES 6,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBBE", "RES 7,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBC6", "SET 0,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBCE", "SET 1,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBD6", "SET 2,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBDE", "SET 3,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBE6", "SET 4,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBEE", "SET 5,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBF6", "SET 6,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("DDCBFE", "SET 7,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB06", "RLC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB0E", "RRC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB16", "RL (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB1E", "RR (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB26", "SLA (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB2E", "SRA (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB36", "SLL (IY+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB3E", "SRL (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB46", "BIT 0,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB4E", "BIT 1,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB56", "BIT 2,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB5E", "BIT 3,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB66", "BIT 4,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB6E", "BIT 5,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB76", "BIT 6,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB7E", "BIT 7,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction("FDCB86", "RES 0,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB8E", "RES 1,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB96", "RES 2,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCB9E", "RES 3,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBA6", "RES 4,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBAE", "RES 5,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBB6", "RES 6,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBBE", "RES 7,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBC6", "SET 0,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBCE", "SET 1,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBD6", "SET 2,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBDE", "SET 3,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBE6", "SET 4,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBEE", "SET 5,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBF6", "SET 6,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction("FDCBFE", "SET 7,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                
                #endregion

                // *********************** END INSTRUCTION TABLE ************************

                // add the undocumented overloads for documented instructions
                instructions = AddUndocumentedRegisterCopyOverloads(instructions);

                // we add each instruction (plus the undocumented overloads) to a dictionary (keyed on the full 1-4 byte opcode as an integer for lookup performance reasons)
                // and a second dictionary keyed on the instruction mnemonic for easy lookup
                // (this is expensive but only runs once at startup)

                foreach (Instruction instruction in instructions)
                {
                    Instructions.Add(int.Parse(instruction.OpcodeString, NumberStyles.HexNumber), instruction);
                    InstructionsByMnemonic.Add(instruction.Mnemonic, instruction);
                }
            }
        }

        private static List<Instruction> AddUndocumentedRegisterCopyOverloads(List<Instruction> instructions)
        {
            List<Instruction> undocumentedInstructions = new List<Instruction>();

            foreach (Instruction instruction in instructions)
            {
                // generate a matrix of undocumented extended instructions for the DDCB / FDCB opcodes, which copy the result of whatever the operation is to a byte register
                // each instruction gets 7 overloads which copy to registers A,B,C,D,E,H,L (except BIT, which gets the overloads but doesn't copy to a register - crazy, eh?)

                // this is quicker than statically adding all the overloads to the main instruction set list above as there would be hundreds of them

                if (instruction.Prefix == 0xDDCB || instruction.Prefix == 0xFDCB)
                {
                    for (byte i = 0; i <= 7; i++)
                    {
                        if (i != 6)
                        {
                            byte opcode = (byte)(instruction.LastOpcodeByte & 0xF8);
                            opcode += (byte)i;

                            string opcodeAsString = instruction.OpcodeString.Substring(0, 4);
                            opcodeAsString += opcode.ToString("X2");

                            // ordinal is different than our default
                            ByteRegister destination = i switch
                            {
                                0 => ByteRegister.B,
                                1 => ByteRegister.C,
                                2 => ByteRegister.D,
                                3 => ByteRegister.E,
                                4 => ByteRegister.H,
                                5 => ByteRegister.L,
                                _ => ByteRegister.A
                            };

                            Instruction undocumentedInstruction = new Instruction(
                                opcodeAsString,
                                // unofficial mnemonic form is eg RES 0,(IX+o),C - resets bit 0 of memory location (IX+o) and copies that byte to C
                                instruction.Mnemonic + "," + destination.ToString(),
                                Condition.None,
                                instruction.Target,
                                instruction.Source,
                                instruction.Argument1,
                                instruction.Argument2,
                                instruction.SizeInBytes,
                                instruction.MachineCycles.Cycles,
                                (instruction.Mnemonic.StartsWith("BIT ") ? ByteRegister.None : (ByteRegister)i) // BIT instructions have no result to store
                            );
                            undocumentedInstructions.Add(undocumentedInstruction);
                        }
                    }
                }
            }

            instructions.AddRange(undocumentedInstructions);
            return instructions;
        }

        static InstructionSet()
        {
        }
    }
}

