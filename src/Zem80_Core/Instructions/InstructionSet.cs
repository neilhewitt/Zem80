using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Zem80.Core.CPU;

namespace Zem80.Core.CPU
{
    public static class InstructionSet
    {
        public static IDictionary<int, Instruction> Instructions { get; private set; } = new Dictionary<int, Instruction>();
        public static IDictionary<string, Instruction> InstructionsByMnemonic { get; private set; } = new Dictionary<string, Instruction>();

        public static Instruction NOP => Instructions[0];

        public static void Build()
        {
            if (Instructions.Count == 0)
            {
                var instructions = new List<Instruction>();

                // we have to build the complete Z80 instruction set, with metadata to allow us to reflect on the instructions as we process them
                // below is a (very long) table of Instruction object instantiations wrapped in an 'instruction_table' block (so you can collapse them easily)
                // instruction constructor is: new Instruction(opcode, mnemonic, condition, target, source, argument1, argument2, sizeInBytes, machine cycles)

                // note that this table includes undocumented instructions and duplicate instructions (same instruction on a different extended opcode)
                // for example, the SLL instructions are not documented, and instructions like NOP2/NEG3 etc are duplicate overloads where the Z80 will execute them
                // on different opcodes from the official ones

                // there are also 'copy register' opcodes which perform the same operation as an existing opcode but then copy the result from the operation into a register
                // (and hence take longer to run); these are all undocumented and are procedurally generated and are NOT in the table

                // ***********************   INSTRUCTION TABLE   ************************ 

                #region instruction_table

                instructions.Add(new Instruction(0x00, "NOP", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x01, "LD BC,nn", Condition.None, InstructionElement.BC, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0x02, "LD (BC),A", Condition.None, InstructionElement.AddressFromBC, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x03, "INC BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x04, "INC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x05, "DEC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x06, "LD B,n", Condition.None, InstructionElement.B, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x07, "RLCA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x08, "EX AF,AF'", Condition.None, InstructionElement.AF, InstructionElement.AF, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x09, "ADD HL,BC", Condition.None, InstructionElement.HL, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0x0A, "LD A,(BC)", Condition.None, InstructionElement.A, InstructionElement.AddressFromBC, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x0B, "DEC BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x0C, "INC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x0D, "DEC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x0E, "LD C,n", Condition.None, InstructionElement.C, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x0F, "RRCA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x10, "DJNZ o", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0x11, "LD DE,nn", Condition.None, InstructionElement.DE, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0x12, "LD (DE),A", Condition.None, InstructionElement.AddressFromDE, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x13, "INC DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x14, "INC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x15, "DEC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x16, "LD D,n", Condition.None, InstructionElement.D, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x17, "RLA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x18, "JR o", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction(0x19, "ADD HL,DE", Condition.None, InstructionElement.HL, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0x1A, "LD A,(DE)", Condition.None, InstructionElement.A, InstructionElement.AddressFromDE, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x1B, "DEC DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x1C, "INC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x1D, "DEC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x1E, "LD E,n", Condition.None, InstructionElement.E, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x1F, "RRA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x20, "JR NZ,o", Condition.NZ, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0x21, "LD HL,nn", Condition.None, InstructionElement.HL, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0x22, "LD (nn),HL", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.HL, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x23, "INC HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x24, "INC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x25, "DEC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x26, "LD H,n", Condition.None, InstructionElement.H, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x27, "DAA", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x28, "JR Z,o", Condition.Z, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0x29, "ADD HL,HL", Condition.None, InstructionElement.HL, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0x2A, "LD HL,(nn)", Condition.None, InstructionElement.HL, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction(0x2B, "DEC HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x2C, "INC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x2D, "DEC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x2E, "LD L,n", Condition.None, InstructionElement.L, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x2F, "CPL", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x30, "JR NC,o", Condition.NC, InstructionElement.None, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0x31, "LD SP,nn", Condition.None, InstructionElement.SP, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0x32, "LD (nn),A", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x33, "INC SP", Condition.None, InstructionElement.SP, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x34, "INC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x35, "DEC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x36, "LD (HL),n", Condition.None, InstructionElement.AddressFromHL, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x37, "SCF", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x38, "JR C,o", Condition.C, InstructionElement.C, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0x39, "ADD HL,SP", Condition.None, InstructionElement.HL, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0x3A, "LD A,(nn)", Condition.None, InstructionElement.A, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x3B, "DEC SP", Condition.None, InstructionElement.SP, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0x3C, "INC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x3D, "DEC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x3E, "LD A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0x3F, "CCF", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x40, "LD B,B", Condition.None, InstructionElement.B, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x41, "LD B,C", Condition.None, InstructionElement.B, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x42, "LD B,D", Condition.None, InstructionElement.B, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x43, "LD B,E", Condition.None, InstructionElement.B, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x44, "LD B,H", Condition.None, InstructionElement.B, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x45, "LD B,L", Condition.None, InstructionElement.B, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x47, "LD B,A", Condition.None, InstructionElement.B, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x46, "LD B,(HL)", Condition.None, InstructionElement.B, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x48, "LD C,B", Condition.None, InstructionElement.C, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x49, "LD C,C", Condition.None, InstructionElement.C, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x4A, "LD C,D", Condition.None, InstructionElement.C, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x4B, "LD C,E", Condition.None, InstructionElement.C, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x4C, "LD C,H", Condition.None, InstructionElement.C, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x4D, "LD C,L", Condition.None, InstructionElement.C, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x4F, "LD C,A", Condition.None, InstructionElement.C, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x4E, "LD C,(HL)", Condition.None, InstructionElement.C, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x50, "LD D,B", Condition.None, InstructionElement.D, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x51, "LD D,C", Condition.None, InstructionElement.D, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x52, "LD D,D", Condition.None, InstructionElement.D, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x53, "LD D,E", Condition.None, InstructionElement.D, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x54, "LD D,H", Condition.None, InstructionElement.D, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x55, "LD D,L", Condition.None, InstructionElement.D, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x57, "LD D,A", Condition.None, InstructionElement.D, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x56, "LD D,(HL)", Condition.None, InstructionElement.D, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x58, "LD E,B", Condition.None, InstructionElement.E, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x59, "LD E,C", Condition.None, InstructionElement.E, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x5A, "LD E,D", Condition.None, InstructionElement.E, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x5B, "LD E,E", Condition.None, InstructionElement.E, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x5C, "LD E,H", Condition.None, InstructionElement.E, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x5D, "LD E,L", Condition.None, InstructionElement.E, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x5F, "LD E,A", Condition.None, InstructionElement.E, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x5E, "LD E,(HL)", Condition.None, InstructionElement.E, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x60, "LD H,B", Condition.None, InstructionElement.H, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x61, "LD H,C", Condition.None, InstructionElement.H, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x62, "LD H,D", Condition.None, InstructionElement.H, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x63, "LD H,E", Condition.None, InstructionElement.H, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x64, "LD H,H", Condition.None, InstructionElement.H, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x65, "LD H,L", Condition.None, InstructionElement.H, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x67, "LD H,A", Condition.None, InstructionElement.H, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x66, "LD H,(HL)", Condition.None, InstructionElement.H, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x68, "LD L,B", Condition.None, InstructionElement.L, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x69, "LD L,C", Condition.None, InstructionElement.L, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x6A, "LD L,D", Condition.None, InstructionElement.L, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x6B, "LD L,E", Condition.None, InstructionElement.L, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x6C, "LD L,H", Condition.None, InstructionElement.L, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x6D, "LD L,L", Condition.None, InstructionElement.L, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x6F, "LD L,A", Condition.None, InstructionElement.L, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x6E, "LD L,(HL)", Condition.None, InstructionElement.L, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x70, "LD (HL),B", Condition.None, InstructionElement.AddressFromHL, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x71, "LD (HL),C", Condition.None, InstructionElement.AddressFromHL, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x72, "LD (HL),D", Condition.None, InstructionElement.AddressFromHL, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x73, "LD (HL),E", Condition.None, InstructionElement.AddressFromHL, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x74, "LD (HL),H", Condition.None, InstructionElement.AddressFromHL, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x75, "LD (HL),L", Condition.None, InstructionElement.AddressFromHL, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x77, "LD (HL),A", Condition.None, InstructionElement.AddressFromHL, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0x76, "HALT", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x78, "LD A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x79, "LD A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x7A, "LD A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x7B, "LD A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x7C, "LD A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x7D, "LD A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x7F, "LD A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x7E, "LD A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x80, "ADD A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x81, "ADD A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x82, "ADD A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x83, "ADD A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x84, "ADD A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x85, "ADD A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x87, "ADD A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x86, "ADD A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x88, "ADC A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x89, "ADC A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x8A, "ADC A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x8B, "ADC A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x8C, "ADC A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x8D, "ADC A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x8F, "ADC A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x8E, "ADC A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x90, "SUB B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x91, "SUB C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x92, "SUB D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x93, "SUB E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x94, "SUB H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x95, "SUB L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x97, "SUB A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x96, "SUB (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0x98, "SBC A,B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x99, "SBC A,C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x9A, "SBC A,D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x9B, "SBC A,E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x9C, "SBC A,H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x9D, "SBC A,L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x9F, "SBC A,A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0x9E, "SBC A,(HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xA0, "AND B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA1, "AND C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA2, "AND D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA3, "AND E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA4, "AND H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA5, "AND L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA7, "AND A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA6, "AND (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xA8, "XOR B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xA9, "XOR C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xAA, "XOR D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xAB, "XOR E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xAC, "XOR H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xAD, "XOR L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xAF, "XOR A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xAE, "XOR (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xB0, "OR B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB1, "OR C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB2, "OR D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB3, "OR E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB4, "OR H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB5, "OR L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB7, "OR A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB6, "OR (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xB8, "CP B", Condition.None, InstructionElement.A, InstructionElement.B, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xB9, "CP C", Condition.None, InstructionElement.A, InstructionElement.C, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xBA, "CP D", Condition.None, InstructionElement.A, InstructionElement.D, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xBB, "CP E", Condition.None, InstructionElement.A, InstructionElement.E, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xBC, "CP H", Condition.None, InstructionElement.A, InstructionElement.H, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xBD, "CP L", Condition.None, InstructionElement.A, InstructionElement.L, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xBF, "CP A", Condition.None, InstructionElement.A, InstructionElement.A, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xBE, "CP (HL)", Condition.None, InstructionElement.A, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xC0, "RET NZ", Condition.NZ, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xC1, "POP BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xC2, "JP NZ,nn", Condition.NZ, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xC3, "JP nn", Condition.None, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xC4, "CALL NZ,nn", Condition.NZ, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xC5, "PUSH BC", Condition.None, InstructionElement.BC, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xC6, "ADD A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xC7, "RST 00H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xC8, "RET Z", Condition.Z, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xC9, "RET", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xCA, "JP Z,nn", Condition.Z, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xCC, "CALL Z,nn", Condition.Z, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xCD, "CALL nn", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xCE, "ADC A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xCF, "RST 08H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xD0, "RET NC", Condition.NC, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xD1, "POP DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xD2, "JP NC,nn", Condition.NC, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xD3, "OUT (n),A", Condition.None, InstructionElement.None, InstructionElement.A, InstructionElement.PortNumberFromByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xD4, "CALL NC,nn", Condition.NC, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xD5, "PUSH DE", Condition.None, InstructionElement.DE, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xD6, "SUB n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xD7, "RST 10H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xD8, "RET C", Condition.C, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xD9, "EXX", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDA, "JP C,nn", Condition.C, InstructionElement.C, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xDB, "IN A,(n)", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.PortNumberFromByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xDC, "CALL C,nn", Condition.C, InstructionElement.C, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xDE, "SBC A,n", Condition.None, InstructionElement.A, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xDF, "RST 18H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xE0, "RET PO", Condition.PO, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xE1, "POP HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xE2, "JP PO,nn", Condition.PO, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xE3, "EX (SP),HL", Condition.None, InstructionElement.AddressFromSP, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 5, false) }));
                instructions.Add(new Instruction(0xE4, "CALL PO,nn", Condition.PO, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xE5, "PUSH HL", Condition.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xE6, "AND n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xE7, "RST 20H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xE8, "RET PE", Condition.PE, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xE9, "JP HL", Condition.None, InstructionElement.None, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xEA, "JP PE,nn", Condition.PE, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xEB, "EX DE,HL", Condition.None, InstructionElement.DE, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xEC, "CALL PE,nn", Condition.PE, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xEE, "XOR n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xEF, "RST 28H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xF0, "RET P", Condition.P, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xF1, "POP AF", Condition.None, InstructionElement.AF, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xF2, "JP P,nn", Condition.P, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xF3, "DI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xF4, "CALL P,nn", Condition.P, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xF5, "PUSH AF", Condition.None, InstructionElement.AF, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xF6, "OR n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xF7, "RST 30H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xF8, "RET M", Condition.M, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xF9, "LD SP,HL", Condition.None, InstructionElement.SP, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xFA, "JP M,nn", Condition.M, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xFB, "EI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFC, "CALL M,nn", Condition.M, InstructionElement.None, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, true), new MachineCycle(MachineCycleType.StackReadHigh, 3, true) }));
                instructions.Add(new Instruction(0xFE, "CP n", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.ByteValue, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xFF, "RST 38H", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xCB00, "RLC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB01, "RLC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB02, "RLC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB03, "RLC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB04, "RLC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB05, "RLC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB07, "RLC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB06, "RLC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB08, "RRC B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB09, "RRC C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB0A, "RRC D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB0B, "RRC E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB0C, "RRC H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB0D, "RRC L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB0F, "RRC A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB0E, "RRC (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB10, "RL B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB11, "RL C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB12, "RL D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB13, "RL E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB14, "RL H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB15, "RL L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB17, "RL A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB16, "RL (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB18, "RR B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB19, "RR C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB1A, "RR D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB1B, "RR E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB1C, "RR H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB1D, "RR L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB1F, "RR A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB1E, "RR (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB20, "SLA B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB21, "SLA C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB22, "SLA D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB23, "SLA E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB24, "SLA H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB25, "SLA L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB27, "SLA A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB26, "SLA (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB28, "SRA B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB29, "SRA C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB2A, "SRA D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB2B, "SRA E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB2C, "SRA H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB2D, "SRA L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB2F, "SRA A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB2E, "SRA (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB30, "SLL B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB31, "SLL C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB32, "SLL D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB33, "SLL E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB34, "SLL H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB35, "SLL L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB37, "SLL A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB36, "SLL (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB38, "SRL B", Condition.None, InstructionElement.B, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB39, "SRL C", Condition.None, InstructionElement.C, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB3A, "SRL D", Condition.None, InstructionElement.D, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB3B, "SRL E", Condition.None, InstructionElement.E, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB3C, "SRL H", Condition.None, InstructionElement.H, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB3D, "SRL L", Condition.None, InstructionElement.L, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB3F, "SRL A", Condition.None, InstructionElement.A, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB3E, "SRL (HL)", Condition.None, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB47, "BIT 0,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB4F, "BIT 1,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB57, "BIT 2,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB5F, "BIT 3,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB67, "BIT 4,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB6F, "BIT 5,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB77, "BIT 6,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB7F, "BIT 7,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB40, "BIT 0,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB48, "BIT 1,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB50, "BIT 2,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB58, "BIT 3,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB60, "BIT 4,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB68, "BIT 5,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB70, "BIT 6,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB78, "BIT 7,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB41, "BIT 0,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB49, "BIT 1,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB51, "BIT 2,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB59, "BIT 3,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB61, "BIT 4,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB69, "BIT 5,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB71, "BIT 6,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB79, "BIT 7,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB42, "BIT 0,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB4A, "BIT 1,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB52, "BIT 2,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB5A, "BIT 3,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB62, "BIT 4,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB6A, "BIT 5,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB72, "BIT 6,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB7A, "BIT 7,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB43, "BIT 0,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB4B, "BIT 1,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB53, "BIT 2,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB5B, "BIT 3,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB63, "BIT 4,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB6B, "BIT 5,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB73, "BIT 6,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB7B, "BIT 7,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB44, "BIT 0,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB4C, "BIT 1,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB54, "BIT 2,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB5C, "BIT 3,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB64, "BIT 4,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB6C, "BIT 5,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB74, "BIT 6,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB7C, "BIT 7,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB45, "BIT 0,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB4D, "BIT 1,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB55, "BIT 2,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB5D, "BIT 3,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB65, "BIT 4,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB6D, "BIT 5,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB75, "BIT 6,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB7D, "BIT 7,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB46, "BIT 0,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB4E, "BIT 1,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB56, "BIT 2,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB5E, "BIT 3,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB66, "BIT 4,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB6E, "BIT 5,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB76, "BIT 6,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB7E, "BIT 7,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xCB87, "RES 0,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB8F, "RES 1,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB97, "RES 2,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB9F, "RES 3,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA7, "RES 4,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBAF, "RES 5,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB7, "RES 6,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBBF, "RES 7,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB80, "RES 0,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB88, "RES 1,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB90, "RES 2,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB98, "RES 3,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA0, "RES 4,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA8, "RES 5,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB0, "RES 6,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB8, "RES 7,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB81, "RES 0,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB89, "RES 1,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB91, "RES 2,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB99, "RES 3,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA1, "RES 4,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA9, "RES 5,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB1, "RES 6,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB9, "RES 7,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB82, "RES 0,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB8A, "RES 1,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB92, "RES 2,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB9A, "RES 3,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA2, "RES 4,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBAA, "RES 5,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB2, "RES 6,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBBA, "RES 7,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB83, "RES 0,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB8B, "RES 1,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB93, "RES 2,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB9B, "RES 3,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA3, "RES 4,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBAB, "RES 5,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB3, "RES 6,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBBB, "RES 7,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB84, "RES 0,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB8C, "RES 1,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB94, "RES 2,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB9C, "RES 3,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA4, "RES 4,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBAC, "RES 5,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB4, "RES 6,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBBC, "RES 7,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB85, "RES 0,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB8D, "RES 1,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB95, "RES 2,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB9D, "RES 3,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBA5, "RES 4,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBAD, "RES 5,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBB5, "RES 6,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBBD, "RES 7,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCB86, "RES 0,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB8E, "RES 1,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB96, "RES 2,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCB9E, "RES 3,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBA6, "RES 4,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBAE, "RES 5,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBB6, "RES 6,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBBE, "RES 7,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBC7, "SET 0,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBCF, "SET 1,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD7, "SET 2,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBDF, "SET 3,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE7, "SET 4,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBEF, "SET 5,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF7, "SET 6,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBFF, "SET 7,A", Condition.None, InstructionElement.BitIndex, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC0, "SET 0,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC8, "SET 1,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD0, "SET 2,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD8, "SET 3,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE0, "SET 4,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE8, "SET 5,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF0, "SET 6,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF8, "SET 7,B", Condition.None, InstructionElement.BitIndex, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC1, "SET 0,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC9, "SET 1,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD1, "SET 2,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD9, "SET 3,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE1, "SET 4,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE9, "SET 5,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF1, "SET 6,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF9, "SET 7,C", Condition.None, InstructionElement.BitIndex, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC2, "SET 0,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBCA, "SET 1,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD2, "SET 2,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBDA, "SET 3,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE2, "SET 4,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBEA, "SET 5,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF2, "SET 6,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBFA, "SET 7,D", Condition.None, InstructionElement.BitIndex, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC3, "SET 0,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBCB, "SET 1,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD3, "SET 2,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBDB, "SET 3,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE3, "SET 4,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBEB, "SET 5,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF3, "SET 6,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBFB, "SET 7,E", Condition.None, InstructionElement.BitIndex, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC4, "SET 0,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBCC, "SET 1,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD4, "SET 2,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBDC, "SET 3,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE4, "SET 4,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBEC, "SET 5,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF4, "SET 6,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBFC, "SET 7,H", Condition.None, InstructionElement.BitIndex, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC5, "SET 0,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBCD, "SET 1,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBD5, "SET 2,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBDD, "SET 3,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBE5, "SET 4,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBED, "SET 5,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBF5, "SET 6,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBFD, "SET 7,L", Condition.None, InstructionElement.BitIndex, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xCBC6, "SET 0,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBCE, "SET 1,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBD6, "SET 2,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBDE, "SET 3,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBE6, "SET 4,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBEE, "SET 5,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBF6, "SET 6,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xCBFE, "SET 7,(HL)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromHL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xED40, "IN B,(C)", Condition.None, InstructionElement.B, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED41, "OUT (C),B", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED42, "SBC HL,BC", Condition.None, InstructionElement.HL, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED43, "LD (nn),BC", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.BC, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xED44, "NEG", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED45, "RETN", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED46, "IM 0", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED47, "LD I,A", Condition.None, InstructionElement.I, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED48, "IN C,(C)", Condition.None, InstructionElement.C, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED49, "OUT (C),C", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED4A, "ADC HL,BC", Condition.None, InstructionElement.HL, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED4B, "LD BC,(nn)", Condition.None, InstructionElement.BC, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED54, "NEG2", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED4D, "RETI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED4E, "IM 0.1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED4F, "LD R,A", Condition.None, InstructionElement.R, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction(0xED50, "IN D,(C)", Condition.None, InstructionElement.D, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED51, "OUT (C),D", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED52, "SBC HL,DE", Condition.None, InstructionElement.HL, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED53, "LD (nn),DE", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.DE, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xED55, "RETN1", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED56, "IM 1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED57, "LD A,I", Condition.None, InstructionElement.A, InstructionElement.I, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction(0xED58, "IN E,(C)", Condition.None, InstructionElement.E, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED59, "OUT (C),E", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED5A, "ADC HL,DE", Condition.None, InstructionElement.HL, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED5B, "LD DE,(nn)", Condition.None, InstructionElement.DE, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED5C, "NEG3", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED5D, "RETN2", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED5E, "IM 2", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED5F, "LD A,R", Condition.None, InstructionElement.A, InstructionElement.R, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false) }));
                instructions.Add(new Instruction(0xED60, "IN H,(C)", Condition.None, InstructionElement.H, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED61, "OUT (C),H", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.H, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED62, "SBC HL,HL", Condition.None, InstructionElement.HL, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED64, "NEG4", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED65, "RETN3", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED66, "IM 0.2", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED67, "RRD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xED68, "IN L,(C)", Condition.None, InstructionElement.L, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED69, "OUT (C),L", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.L, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED6A, "ADC HL,HL", Condition.None, InstructionElement.HL, InstructionElement.HL, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED6C, "NEG5", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED6D, "RETN4", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED6F, "RLD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xED70, "IN F,(C)", Condition.None, InstructionElement.F, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED71, "OUT (C),0", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.ByteValue, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED72, "SBC HL,SP", Condition.None, InstructionElement.HL, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED73, "LD (nn),SP", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.SP, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xED74, "NEG6", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED75, "RETN5", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED76, "IM 1.1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED78, "IN A,(C)", Condition.None, InstructionElement.A, InstructionElement.PortNumberFromC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortRead, 4, false) }));
                instructions.Add(new Instruction(0xED77, "NOP2", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED79, "OUT (C),A", Condition.None, InstructionElement.PortNumberFromC, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xED7A, "ADC HL,SP", Condition.None, InstructionElement.HL, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xED7B, "LD SP,(nn)", Condition.None, InstructionElement.SP, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED7C, "NEG7", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED7D, "RETN6", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xED7E, "IM 2.1", Condition.None, InstructionElement.BitIndex, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xED7F, "NOP3", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 1, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xEDA0, "LDI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction(0xEDA1, "CPI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction(0xEDA2, "INI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xEDA3, "OUTI", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xEDA8, "LDD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction(0xEDA9, "CPD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false) }));
                instructions.Add(new Instruction(0xEDAA, "IND", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xEDAB, "OUTD", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false) }));
                instructions.Add(new Instruction(0xEDB0, "LDIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0xEDB1, "CPIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0xEDB2, "INIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction(0xEDB3, "OTIR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction(0xEDB8, "LDDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0xEDB9, "CPDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 5, false), new MachineCycle(MachineCycleType.InternalOperation, 5, true) }));
                instructions.Add(new Instruction(0xEDBA, "INDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.PortRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction(0xEDBB, "OTDR", Condition.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false), new MachineCycle(MachineCycleType.PortWrite, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false) }));
                instructions.Add(new Instruction(0xDD24, "INC IXh", Condition.None, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD2C, "INC IXl", Condition.None, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD25, "DEC IXh", Condition.None, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD2D, "DEC IXl", Condition.None, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD09, "ADD IX,BC", Condition.None, InstructionElement.IX, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xDD19, "ADD IX,DE", Condition.None, InstructionElement.IX, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xDD21, "LD IX,nn", Condition.None, InstructionElement.IX, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xDD22, "LD (nn),IX", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.IX, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD23, "INC IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xDD26, "LD IXh,n", Condition.None, InstructionElement.IXh, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xDD29, "ADD IX,IX", Condition.None, InstructionElement.IX, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xDD2A, "LD IX,(nn)", Condition.None, InstructionElement.IX, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xDD2B, "DEC IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xDD2E, "LD IXl,n", Condition.None, InstructionElement.IXl, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xDD34, "INC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD35, "DEC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD36, "LD (IX+o),n", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.ByteValue, InstructionElement.DisplacementValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD39, "ADD IX,SP", Condition.None, InstructionElement.IX, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xDD44, "LD B,IXh", Condition.None, InstructionElement.B, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD45, "LD B,IXl", Condition.None, InstructionElement.B, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD46, "LD B,(IX+o)", Condition.None, InstructionElement.B, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD4C, "LD C,IXh", Condition.None, InstructionElement.C, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD4D, "LD C,IXl", Condition.None, InstructionElement.C, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD4E, "LD C,(IX+o)", Condition.None, InstructionElement.C, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD54, "LD D,IXh", Condition.None, InstructionElement.D, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD55, "LD D,IXl", Condition.None, InstructionElement.D, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD56, "LD D,(IX+o)", Condition.None, InstructionElement.D, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD5C, "LD E,IXh", Condition.None, InstructionElement.E, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD5D, "LD E,IXl", Condition.None, InstructionElement.E, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD5E, "LD E,(IX+o)", Condition.None, InstructionElement.E, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD60, "LD IXh,B", Condition.None, InstructionElement.IXh, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD61, "LD IXh,C", Condition.None, InstructionElement.IXh, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD62, "LD IXh,D", Condition.None, InstructionElement.IXh, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD63, "LD IXh,E", Condition.None, InstructionElement.IXh, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD64, "LD IXh,IXh", Condition.None, InstructionElement.IXh, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD65, "LD IXh,IXl", Condition.None, InstructionElement.IXh, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD67, "LD IXh,A", Condition.None, InstructionElement.IXh, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD66, "LD H,(IX+o)", Condition.None, InstructionElement.H, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD68, "LD IXl,B", Condition.None, InstructionElement.IXl, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD69, "LD IXl,C", Condition.None, InstructionElement.IXl, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD6A, "LD IXl,D", Condition.None, InstructionElement.IXl, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD6B, "LD IXl,E", Condition.None, InstructionElement.IXl, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD6C, "LD IXl,IXh", Condition.None, InstructionElement.IXl, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD6D, "LD IXl,IXl", Condition.None, InstructionElement.IXl, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD6F, "LD IXl,A", Condition.None, InstructionElement.IXl, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD6E, "LD L,(IX+o)", Condition.None, InstructionElement.L, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD70, "LD (IX+o),B", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.B, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD71, "LD (IX+o),C", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.C, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD72, "LD (IX+o),D", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.D, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD73, "LD (IX+o),E", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.E, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD74, "LD (IX+o),H", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.H, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD75, "LD (IX+o),L", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.L, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD77, "LD (IX+o),A", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.A, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDD7C, "LD A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD7D, "LD A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD7E, "LD A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD84, "ADD A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD85, "ADD A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD86, "ADD A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD8C, "ADC A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD8D, "ADC A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD8E, "ADC A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD94, "SUB IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD95, "SUB IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD96, "SUB (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDD9C, "SBC A,IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD9D, "SBC A,IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDD9E, "SBC A,(IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDDA4, "AND IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDA5, "AND IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDA6, "AND (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDDAC, "XOR IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDAD, "XOR IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDAE, "XOR (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDDB4, "OR IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDB5, "OR IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDB6, "OR (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDDBC, "CP IXh", Condition.None, InstructionElement.A, InstructionElement.IXh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDBD, "CP IXl", Condition.None, InstructionElement.A, InstructionElement.IXl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDBE, "CP (IX+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xDDE1, "POP IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xDDE3, "EX (SP),IX", Condition.None, InstructionElement.AddressFromSP, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 5, false) }));
                instructions.Add(new Instruction(0xDDE5, "PUSH IX", Condition.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xDDE9, "JP IX", Condition.None, InstructionElement.None, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xDDF9, "LD SP,IX", Condition.None, InstructionElement.SP, InstructionElement.IX, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xFD24, "INC IYh", Condition.None, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD2C, "INC IYl", Condition.None, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD25, "DEC IYh", Condition.None, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD2D, "DEC IYl", Condition.None, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD09, "ADD IY,BC", Condition.None, InstructionElement.IY, InstructionElement.BC, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xFD19, "ADD IY,DE", Condition.None, InstructionElement.IY, InstructionElement.DE, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xFD21, "LD IY,nn", Condition.None, InstructionElement.IY, InstructionElement.WordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xFD22, "LD (nn),IY", Condition.None, InstructionElement.AddressFromWordValue, InstructionElement.IY, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD23, "INC IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xFD26, "LD IYh,n", Condition.None, InstructionElement.IYh, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xFD29, "ADD IY,IY", Condition.None, InstructionElement.IY, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xFD2A, "LD IY,(nn)", Condition.None, InstructionElement.IY, InstructionElement.AddressFromWordValue, InstructionElement.ByteValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandReadLow, 3, false), new MachineCycle(MachineCycleType.OperandReadHigh, 3, false), new MachineCycle(MachineCycleType.MemoryReadLow, 3, false), new MachineCycle(MachineCycleType.MemoryReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xFD2B, "DEC IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xFD2E, "LD IYl,n", Condition.None, InstructionElement.IYl, InstructionElement.ByteValue, InstructionElement.ByteValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false) }));
                instructions.Add(new Instruction(0xFD34, "INC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD35, "DEC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD36, "LD (IY+o),n", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.ByteValue, InstructionElement.DisplacementValue, InstructionElement.ByteValue, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD39, "ADD IY,SP", Condition.None, InstructionElement.IY, InstructionElement.SP, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 4, false), new MachineCycle(MachineCycleType.InternalOperation, 3, false) }));
                instructions.Add(new Instruction(0xFD44, "LD B,IYh", Condition.None, InstructionElement.B, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD45, "LD B,IYl", Condition.None, InstructionElement.B, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD46, "LD B,(IY+o)", Condition.None, InstructionElement.B, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD4C, "LD C,IYh", Condition.None, InstructionElement.C, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD4D, "LD C,IYl", Condition.None, InstructionElement.C, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD4E, "LD C,(IY+o)", Condition.None, InstructionElement.C, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD54, "LD D,IYh", Condition.None, InstructionElement.D, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD55, "LD D,IYl", Condition.None, InstructionElement.D, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD56, "LD D,(IY+o)", Condition.None, InstructionElement.D, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD5C, "LD E,IYh", Condition.None, InstructionElement.E, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD5D, "LD E,IYl", Condition.None, InstructionElement.E, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD5E, "LD E,(IY+o)", Condition.None, InstructionElement.E, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD60, "LD IYh,B", Condition.None, InstructionElement.IYh, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD61, "LD IYh,C", Condition.None, InstructionElement.IYh, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD62, "LD IYh,D", Condition.None, InstructionElement.IYh, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD63, "LD IYh,E", Condition.None, InstructionElement.IYh, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD64, "LD IYh,IYh", Condition.None, InstructionElement.IYh, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD65, "LD IYh,IYl", Condition.None, InstructionElement.IYh, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD67, "LD IYh,A", Condition.None, InstructionElement.IYh, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD66, "LD H,(IY+o)", Condition.None, InstructionElement.H, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD68, "LD IYl,B", Condition.None, InstructionElement.IYl, InstructionElement.B, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD69, "LD IYl,C", Condition.None, InstructionElement.IYl, InstructionElement.C, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD6A, "LD IYl,D", Condition.None, InstructionElement.IYl, InstructionElement.D, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD6B, "LD IYl,E", Condition.None, InstructionElement.IYl, InstructionElement.E, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD6C, "LD IYl,IYh", Condition.None, InstructionElement.IYl, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD6D, "LD IYl,IYl", Condition.None, InstructionElement.IYl, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD6F, "LD IYl,A", Condition.None, InstructionElement.IYl, InstructionElement.A, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD6E, "LD L,(IY+o)", Condition.None, InstructionElement.L, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD70, "LD (IY+o),B", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.B, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD71, "LD (IY+o),C", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.C, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD72, "LD (IY+o),D", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.D, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD73, "LD (IY+o),E", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.E, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD74, "LD (IY+o),H", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.H, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD75, "LD (IY+o),L", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.L, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD77, "LD (IY+o),A", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.A, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFD7C, "LD A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD7D, "LD A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD7E, "LD A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD84, "ADD A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD85, "ADD A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD86, "ADD A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD8C, "ADC A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD8D, "ADC A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD8E, "ADC A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD94, "SUB IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD95, "SUB IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD96, "SUB (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFD9C, "SBC A,IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD9D, "SBC A,IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFD9E, "SBC A,(IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFDA4, "AND IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDA5, "AND IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDA6, "AND (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFDAC, "XOR IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDAD, "XOR IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDAE, "XOR (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFDB4, "OR IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDB5, "OR IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDB6, "OR (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFDBC, "CP IYh", Condition.None, InstructionElement.A, InstructionElement.IYh, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDBD, "CP IYl", Condition.None, InstructionElement.A, InstructionElement.IYl, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDBE, "CP (IY+o)", Condition.None, InstructionElement.A, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 3, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 3, false) }));
                instructions.Add(new Instruction(0xFDE1, "POP IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xFDE3, "EX (SP),IY", Condition.None, InstructionElement.AddressFromSP, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 4, false), new MachineCycle(MachineCycleType.StackWriteLow, 3, false), new MachineCycle(MachineCycleType.StackWriteHigh, 5, false) }));
                instructions.Add(new Instruction(0xFDE5, "PUSH IY", Condition.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 5, false), new MachineCycle(MachineCycleType.StackReadLow, 3, false), new MachineCycle(MachineCycleType.StackReadHigh, 3, false) }));
                instructions.Add(new Instruction(0xFDE9, "JP IY", Condition.None, InstructionElement.None, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false) }));
                instructions.Add(new Instruction(0xFDF9, "LD SP,IY", Condition.None, InstructionElement.SP, InstructionElement.IY, InstructionElement.None, InstructionElement.None, 2, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 6, false) }));
                instructions.Add(new Instruction(0xDDCB06, "RLC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB0E, "RRC (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB16, "RL (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB1E, "RR (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB26, "SLA (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB2E, "SRA (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB36, "SLL (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB3E, "SRL (IX+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB46, "BIT 0,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB4E, "BIT 1,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB56, "BIT 2,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB5E, "BIT 3,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB66, "BIT 4,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB6E, "BIT 5,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB76, "BIT 6,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB7E, "BIT 7,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xDDCB86, "RES 0,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB8E, "RES 1,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB96, "RES 2,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCB9E, "RES 3,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBA6, "RES 4,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBAE, "RES 5,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBB6, "RES 6,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBBE, "RES 7,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBC6, "SET 0,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBCE, "SET 1,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBD6, "SET 2,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBDE, "SET 3,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBE6, "SET 4,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBEE, "SET 5,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBF6, "SET 6,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xDDCBFE, "SET 7,(IX+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIXAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB06, "RLC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB0E, "RRC (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB16, "RL (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB1E, "RR (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB26, "SLA (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB2E, "SRA (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB36, "SLL (IY+o)", Condition.None, InstructionElement.AddressFromIXAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB3E, "SRL (IY+o)", Condition.None, InstructionElement.AddressFromIYAndOffset, InstructionElement.None, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB46, "BIT 0,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB4E, "BIT 1,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB56, "BIT 2,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB5E, "BIT 3,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB66, "BIT 4,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB6E, "BIT 5,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB76, "BIT 6,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB7E, "BIT 7,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false) }));
                instructions.Add(new Instruction(0xFDCB86, "RES 0,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB8E, "RES 1,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB96, "RES 2,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCB9E, "RES 3,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBA6, "RES 4,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBAE, "RES 5,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBB6, "RES 6,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBBE, "RES 7,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBC6, "SET 0,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBCE, "SET 1,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBD6, "SET 2,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBDE, "SET 3,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBE6, "SET 4,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBEE, "SET 5,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBF6, "SET 6,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                instructions.Add(new Instruction(0xFDCBFE, "SET 7,(IY+o)", Condition.None, InstructionElement.BitIndex, InstructionElement.AddressFromIYAndOffset, InstructionElement.DisplacementValue, InstructionElement.None, 4, new MachineCycle[] { new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OpcodeFetch, 4, false), new MachineCycle(MachineCycleType.OperandRead, 3, false), new MachineCycle(MachineCycleType.InternalOperation, 5, false), new MachineCycle(MachineCycleType.MemoryRead, 4, false), new MachineCycle(MachineCycleType.MemoryWrite, 3, false) }));
                
                #endregion

                // *********************** END INSTRUCTION TABLE ************************

                // add the undocumented overloads for documented instructions
                instructions = AddUndocumentedRegisterCopyOverloads(instructions);

                // we add each instruction (plus the undocumented overloads) to a dictionary (keyed on the full 1-4 byte opcode as an integer for lookup performance reasons)
                // and a second dictionary keyed on the instruction mnemonic for easy lookup
                // (this is expensive but only runs once at startup)

                foreach (Instruction instruction in instructions)
                {
                    Instructions.Add(instruction.Opcode, instruction);
                    InstructionsByMnemonic.Add(instruction.Mnemonic, instruction);
                }
            }
        }

        private static List<Instruction> AddUndocumentedRegisterCopyOverloads(List<Instruction> instructions)
        {
            List<Instruction> undocumentedInstructions = new List<Instruction>();

            foreach (Instruction instruction in instructions)
            {
                // generate a matrix of undocumented extended instructions for the DDCB / FDCB opcodes, which copy the result of whatever the operation is to a byte register
                // each instruction gets 7 overloads which copy to registers A,B,C,D,E,H,L (except BIT, which gets the overloads but doesn't copy to a register - crazy, eh?)

                // this is quicker than statically adding all the overloads to the main instruction set list above as there would be hundreds of them

                if (instruction.Prefix == 0xDDCB || instruction.Prefix == 0xFDCB)
                {
                    for (byte i = 0; i <= 7; i++)
                    {
                        if (i != 6)
                        {
                            int newOpcode = (instruction.Opcode & 0xFFFF00) + (byte)(instruction.LastOpcodeByte & 0xF8) + i;

                            // ordinal is different than our default
                            ByteRegister destination = i switch
                            {
                                0 => ByteRegister.B,
                                1 => ByteRegister.C,
                                2 => ByteRegister.D,
                                3 => ByteRegister.E,
                                4 => ByteRegister.H,
                                5 => ByteRegister.L,
                                _ => ByteRegister.A
                            };

                            Instruction undocumentedInstruction = new Instruction(
                                newOpcode,
                                // unofficial mnemonic form is eg RES 0,(IX+o),C - resets bit 0 of memory location (IX+o) and copies that byte to C
                                instruction.Mnemonic + "," + destination.ToString(),
                                Condition.None,
                                instruction.Target,
                                instruction.Source,
                                instruction.Argument1,
                                instruction.Argument2,
                                instruction.SizeInBytes,
                                instruction.MachineCycles.Cycles,
                                (instruction.Mnemonic.StartsWith("BIT ") ? ByteRegister.None : (ByteRegister)i) // BIT instructions have no result to store
                            );
                            undocumentedInstructions.Add(undocumentedInstruction);
                        }
                    }
                }
            }

            instructions.AddRange(undocumentedInstructions);
            return instructions;
        }

        static InstructionSet()
        {
        }
    }
}

